/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "BaseRtpEndpointImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include <MediaState.hpp>
#include <ConnectionState.hpp>
#include <time.h>
#include <SignalHandler.hpp>
#include "RembParams.hpp"

#include "Statistics.hpp"

#define GST_CAT_DEFAULT kurento_base_rtp_endpoint_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoBaseRtpEndpointImpl"

#define KMS_MEDIA_DISCONNECTED 0
#define KMS_MEDIA_CONNECTED 1
#define KMS_CONNECTION_DISCONNECTED 0
#define KMS_CONNECTION_CONNECTED 1
#define REMB_PARAMS "remb-params"

namespace kurento
{
void BaseRtpEndpointImpl::postConstructor ()
{
  SdpEndpointImpl::postConstructor ();

  mediaStateChangedHandlerId = register_signal_handler (G_OBJECT (element),
                               "media-state-changed",
                               std::function <void (GstElement *, guint) > (std::bind (
                                     &BaseRtpEndpointImpl::updateMediaState, this,
                                     std::placeholders::_2) ),
                               std::dynamic_pointer_cast<BaseRtpEndpointImpl>
                               (shared_from_this() ) );

  connStateChangedHandlerId = register_signal_handler (G_OBJECT (element),
                              "connection-state-changed",
                              std::function <void (GstElement *, guint) > (std::bind (
                                    &BaseRtpEndpointImpl::updateConnectionState, this,
                                    std::placeholders::_2) ),
                              std::dynamic_pointer_cast<BaseRtpEndpointImpl>
                              (shared_from_this() ) );
}

BaseRtpEndpointImpl::BaseRtpEndpointImpl (const boost::property_tree::ptree
    &config,
    std::shared_ptr< MediaObjectImpl > parent,
    const std::string &factoryName) :
  SdpEndpointImpl (config, parent, factoryName)
{
  current_media_state = std::make_shared <MediaState>
                        (MediaState::DISCONNECTED);
  mediaStateChangedHandlerId = 0;

  current_conn_state = std::make_shared <ConnectionState>
                       (ConnectionState::DISCONNECTED);
  connStateChangedHandlerId = 0;
}

BaseRtpEndpointImpl::~BaseRtpEndpointImpl ()
{
  if (mediaStateChangedHandlerId > 0) {
    unregister_signal_handler (element, mediaStateChangedHandlerId);
  }
}

void
BaseRtpEndpointImpl::updateMediaState (guint new_state)
{
  std::unique_lock<std::recursive_mutex> lock (mutex);
  std::shared_ptr<MediaState> old_state = current_media_state;

  switch (new_state) {
  case KMS_MEDIA_DISCONNECTED:
    current_media_state = std::make_shared <MediaState>
                          (MediaState::DISCONNECTED);
    break;

  case KMS_MEDIA_CONNECTED:
    current_media_state = std::make_shared <MediaState>
                          (MediaState::CONNECTED);
    break;

  default:
    GST_ERROR ("Invalid media state %u", new_state);
    return;
  }

  if (old_state->getValue() != current_media_state->getValue() ) {
    /* Emit state change signal */
    MediaStateChanged event (shared_from_this(),
                             MediaStateChanged::getName (), old_state, current_media_state);

    this->signalMediaStateChanged (event);
  }
}

void
BaseRtpEndpointImpl::updateConnectionState (guint new_state)
{
  std::unique_lock<std::recursive_mutex> lock (mutex);
  std::shared_ptr<ConnectionState> old_state = current_conn_state;

  switch (new_state) {
  case KMS_CONNECTION_DISCONNECTED:
    current_conn_state = std::make_shared <ConnectionState>
                         (ConnectionState::DISCONNECTED);
    break;

  case KMS_CONNECTION_CONNECTED:
    current_conn_state = std::make_shared <ConnectionState>
                         (ConnectionState::CONNECTED);
    break;

  default:
    GST_ERROR ("Invalid connection state %u", new_state);
    return;
  }

  if (old_state->getValue() != current_conn_state->getValue() ) {
    /* Emit state change signal */
    ConnectionStateChanged event (shared_from_this(),
                                  ConnectionStateChanged::getName (), old_state, current_conn_state);

    this->signalConnectionStateChanged (event);
  }
}

int BaseRtpEndpointImpl::getMinVideoRecvBandwidth ()
{
  int minVideoRecvBandwidth;

  g_object_get (element, "min-video-recv-bandwidth", &minVideoRecvBandwidth,
                NULL);

  return minVideoRecvBandwidth;
}

void BaseRtpEndpointImpl::setMinVideoRecvBandwidth (int minVideoRecvBandwidth)
{
  g_object_set (element, "min-video-recv-bandwidth", minVideoRecvBandwidth, NULL);
}

int BaseRtpEndpointImpl::getMinVideoSendBandwidth ()
{
  int minVideoSendBandwidth;

  g_object_get (element, "min-video-send-bandwidth", &minVideoSendBandwidth,
                NULL);

  return minVideoSendBandwidth;
}

void BaseRtpEndpointImpl::setMinVideoSendBandwidth (int minVideoSendBandwidth)
{
  g_object_set (element, "min-video-send-bandwidth", minVideoSendBandwidth, NULL);
}

int BaseRtpEndpointImpl::getMaxVideoSendBandwidth ()
{
  int maxVideoSendBandwidth;

  g_object_get (element, "max-video-send-bandwidth", &maxVideoSendBandwidth,
                NULL);

  return maxVideoSendBandwidth;
}

void BaseRtpEndpointImpl::setMaxVideoSendBandwidth (int maxVideoSendBandwidth)
{
  g_object_set (element, "max-video-send-bandwidth", maxVideoSendBandwidth, NULL);
}

std::map <std::string, std::shared_ptr<RTCStats>>
    BaseRtpEndpointImpl::getStats ()
{
  std::map <std::string, std::shared_ptr<RTCStats>> rtcStatsReport;
  GstStructure *stats;

  g_signal_emit_by_name (getGstreamerElement(), "stats", &stats);

  rtcStatsReport = stats::createRTCStatsReport (time (NULL), stats);

  gst_structure_free (stats);

  return rtcStatsReport;
}

std::shared_ptr<MediaState>
BaseRtpEndpointImpl::getMediaState ()
{
  return current_media_state;
}

std::shared_ptr<ConnectionState>
BaseRtpEndpointImpl::getConnectionState ()
{
  return current_conn_state;
}

std::shared_ptr<RembParams>
BaseRtpEndpointImpl::getRembParams ()
{
  std::shared_ptr<RembParams> ret (new RembParams() );
  GstStructure *params;
  gint auxi;
  gfloat auxf;

  g_object_get (G_OBJECT (element), REMB_PARAMS, &params, NULL);

  if (params == NULL)  {
    return ret;
  }

  /* REMB local begin */
  gst_structure_get (params, "packets-recv-interval-top", G_TYPE_INT, &auxi,
                     NULL);
  ret->setPacketsRecvIntervalTop (auxi);

  gst_structure_get (params, "exponential-factor", G_TYPE_FLOAT, &auxf, NULL);
  ret->setExponentialFactor (auxf);

  gst_structure_get (params, "lineal-factor-min", G_TYPE_INT, &auxi, NULL);
  ret->setLinealFactorMin (auxi);

  gst_structure_get (params, "lineal-factor-grade", G_TYPE_FLOAT, &auxf, NULL);
  ret->setLinealFactorGrade (auxf);

  gst_structure_get (params, "decrement-factor", G_TYPE_FLOAT, &auxf, NULL);
  ret->setDecrementFactor (auxf);

  gst_structure_get (params, "threshold-factor", G_TYPE_FLOAT, &auxf, NULL);
  ret->setThresholdFactor (auxf);

  gst_structure_get (params, "up-losses", G_TYPE_INT, &auxi, NULL);
  ret->setUpLosses (auxi);
  /* REMB local end */

  /* REMB remote begin */
  gst_structure_get (params, "remb-on-connect", G_TYPE_INT, &auxi, NULL);
  ret->setRembOnConnect (auxi);
  /* REMB remote end */

  gst_structure_free (params);

  return ret;
}

void
BaseRtpEndpointImpl::setRembParams (std::shared_ptr<RembParams> rembParams)
{
  GstStructure *params = gst_structure_new_empty (REMB_PARAMS);

  /* REMB local begin */
  if (rembParams->isSetPacketsRecvIntervalTop () ) {
    gst_structure_set (params, "packets-recv-interval-top", G_TYPE_INT,
                       rembParams->getPacketsRecvIntervalTop(), NULL);
    GST_DEBUG_OBJECT (element, "New 'packets-recv-interval-top' value %d",
                      rembParams->getPacketsRecvIntervalTop() );
  }

  if (rembParams->isSetExponentialFactor () ) {
    gst_structure_set (params, "exponential-factor", G_TYPE_FLOAT,
                       rembParams->getExponentialFactor(), NULL);
    GST_DEBUG_OBJECT (element, "New 'exponential-factor' value %g",
                      rembParams->getExponentialFactor() );
  }

  if (rembParams->isSetLinealFactorMin () ) {
    gst_structure_set (params, "lineal-factor-min", G_TYPE_INT,
                       rembParams->getLinealFactorMin(), NULL);
    GST_DEBUG_OBJECT (element, "New 'lineal-factor-min' value %d",
                      rembParams->getLinealFactorMin() );
  }

  if (rembParams->isSetLinealFactorGrade () ) {
    gst_structure_set (params, "lineal-factor-grade", G_TYPE_FLOAT,
                       rembParams->getLinealFactorGrade(), NULL);
    GST_DEBUG_OBJECT (element, "New 'lineal-factor-grade' value %g",
                      rembParams->getLinealFactorGrade() );
  }

  if (rembParams->isSetDecrementFactor () ) {
    gst_structure_set (params, "decrement-factor", G_TYPE_FLOAT,
                       rembParams->getDecrementFactor(), NULL);
    GST_DEBUG_OBJECT (element, "New 'decrement-factor' value %g",
                      rembParams->getDecrementFactor() );
  }

  if (rembParams->isSetThresholdFactor () ) {
    gst_structure_set (params, "threshold-factor", G_TYPE_FLOAT,
                       rembParams->getThresholdFactor(), NULL);
    GST_DEBUG_OBJECT (element, "New 'threshold-factor' value %g",
                      rembParams->getThresholdFactor() );
  }

  if (rembParams->isSetUpLosses () ) {
    gst_structure_set (params, "up-losses", G_TYPE_INT,
                       rembParams->getUpLosses(), NULL);
    GST_DEBUG_OBJECT (element, "New 'up-losses' value %d",
                      rembParams->getUpLosses() );
  }

  /* REMB local end */

  /* REMB remote begin */
  if (rembParams->isSetRembOnConnect () ) {
    gst_structure_set (params, "remb-on-connect", G_TYPE_INT,
                       rembParams->getRembOnConnect(), NULL);
    GST_DEBUG_OBJECT (element, "New 'remb-on-connect' value %d",
                      rembParams->getRembOnConnect() );
  }

  /* REMB remote end */

  g_object_set (G_OBJECT (element), REMB_PARAMS, params, NULL);
  gst_structure_free (params);
}

BaseRtpEndpointImpl::StaticConstructor BaseRtpEndpointImpl::staticConstructor;

BaseRtpEndpointImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* kurento */
